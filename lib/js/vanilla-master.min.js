! function (a, b) {"function" == tipo de definição && define.amd? define (b): a.VMasker = b ()} (esta, função () {var a = "9", b = "A" , c = "S", d = [8,9,16,17,18,36,37,38,39,40,91,92,93], e = função (a) {for (var b = 0 , c = comprimento d; c> b; b ++) if (a == d [b]) return! 1; return! 0}, f = função (a) {return a = a || {}, a = {precision: a.hasOwnProperty ("precision")? a.precision: 2, separator: a.separator || ",", delimitador: a.delimiter || ".", unidade: a.unit && a.unit.replace ( / [\ s] / g, "") + "" || "", sufixoUnit: a.suffixUnit && "" + a.suffixUnit.replace (/ [\ s] / g, "") || "", zeroCents : a.zeroCents, lastOutput: a.lastOutput}, a.moneyPrecision = a.zeroCents? 0: a.precision, a}, g = function (a) {this.elements = a}; g.prototype.unbindElementToMask = function () {para (var a = 0, b = this.elements.length; b> a;a ++) this.elements [a] .lastOutput = "", this.elements [a] .onkeyup =! 1, this.elements [a] .onkeydown =! 1, this.elements [a] .value.length && (this .elements [a] .value = this.elements [a] .value.replace (/ \ D / g, ""))}, g.prototype.bindElementToMask = function (a) {for (var b = this, c = função (c) {c = c || window.event; var d = c.target || c.srcElement; e (c.keyCode) && setTimeout (função () {b.opts.lastOutput = d.lastOutput, d .value = h [a] (d.valor, b.opts), d.lastOutput = d.value, d.setSelectionRange && b.opts.suffixUnit && d.setSelectionRange (d.value.length, d.value.length-b.opts .suffixUnit.length)}, 0)}, d = 0, f = this.elements.length; f> d; d ++) this.elements [d] .lastOutput = "", this.elements [d] .onkeyup = c, this.elements [d] .value.length && (this.elements [d] .value = h [a] (this.elements [d] .value, this.opts))}, g.prototype.maskMoney = function (a) {this.opts = f (a),this.bindElementToMask ("toMoney")}, g.prototype.maskNumber = function () {this.opts = {}, this.bindElementToMask ("toNumber")}, g.prototype.maskPattern = function (a) {this. opts = {padrão: a}, this.bindElementToMask ("toPattern")}, g.prototype.unMask = function () {this.unbindElementToMask ()}; var h = function (a) {if (! a) throw new Erro ("VanillaMasker: não há elemento para vincular."); Var b = "length" em um? A.length? A: []: [a]; retorna novo g (b)}; retorna h.toMoney = função (a, b) {if (b = f (b), b.zeroCents) {b.lastOutput = b.lastOutput || ""; var c = "(" + b.separator + "[0] {0, "+ b.precisão +"}) ", d = new RegExp (c," g "), e = a.toString (). replace (/ [\ D] / g," "). length || 0, g = b.lastOutput.toString (). replace (/ [\ D] / g, ""). length || 0; a = a.toString (). replace (d, ""), g> e && (a = a.slice (0, a.length-1))} var h = a.toString (). replace (/ [\ D] / g, ""), i = new RegExp ("^ (0 | \\" + b.delimiter + ")") , j = new RegExp ("(\\" + b.separator + ") $"), k = h.substr (0, h.length-b.moneyPrecision), l = k.substr (0, k.length% 3), m = nova matriz (b.precisão + 1) .join ("0"); k = k.substr (k.length% 3, k.length); for (var n = 0, o = k. comprimento; o> n; n ++) n% 3 === 0 && (l + = b.delimitador), l + = k [n]; se (l = l. substituir (i, ""), l = l.length? l: "0",! b.zeroCents) {var p = h.pr comprimento-b.precisão, q = h.substr (p, b.precisão), r = q.length, s = b.precisão> r? b.precision: r; m = (m + q) .slice (-s)} var t = b.unidade + l + b.separator + m + b.suffixUnit; return t.replace (j, "")} , h.toPattern = função (d, e) {var f, g = "objeto" == tipo de e? e.pattern: e, h = g.replace (/ \ W / g, ""), i = g .split (""), j = d.aString (). replace (/ \ W / g, ""), k = j. substituir (/ \ W / g, ""), l = 0, m = i.length; para (f = 0; m> f; f ++) {if (l> = j.length) {if (h.length == k.length) retorna i. junção (""); quebra} i [f] === a && j [l] .match (/ [0-9] /) || i [f] === b && j [l] .match (/ [a- zA-Z] /) || i [f] === c && j [l] .match (/ [0-9a-zA-Z] /)? i [f] = j [l ++] :( i [f] === a || i [f] === b || i [f] === c) && (i = i.slice (0, f))} retorna i.join (""). substr ( 0, f)}, h.toNúmero = função (a) {retorna a.toString (). Replace (/ (?! ^ -) [^ 0-9] / g, "")}, h});"")}, h});"")}, h});